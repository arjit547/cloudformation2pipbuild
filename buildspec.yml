version: 0.2
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 578813437933.dkr.ecr.us-east-1.amazonaws.com

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t tricity1 .
      - docker tag tricity1:latest 578813437933.dkr.ecr.us-east-1.amazonaws.com/tricity1:latest

      # Run Trivy with JSON output and store the report locally
      - docker pull aquasec/trivy:latest
      - docker run --rm -v $(pwd):/workdir aquasec/trivy:latest image tricity1:latest --format json -o /workdir/trivy-report.json

      # Download Trivy HTML template
      - wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      # Convert JSON report to HTML using jq and Trivy HTML template
      - docker run --rm -v $(pwd):/workdir tricity1 /bin/sh -c "apk add --update jq && jq --slurpfile input /workdir/trivy-report.json -n 'input[0]' > /workdir/trivy-report.html && cat /workdir/html.tpl /workdir/trivy-report.html > /workdir/final-report.html"

      # Upload the final HTML report to S3
      - aws s3 cp /workdir/final-report.html s3://pipelinezapout/

      # ... Rest of your build steps ...

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push 578813437933.dkr.ecr.us-east-1.amazonaws.com/tricity1:latest
      - echo Writing image definitions file...
      #- printf '[{"name":"iaf-container","imageUri":"875525659788.dkr.ecr.us-east-1.amazonaws.com/iaf:latest"}]' 875525659788.dkr.ecr.us-east-1.amazonaws.com/iaf:latest > imagedefinitions.json
artifacts:
  files:
    #- imagedefinitions.json
